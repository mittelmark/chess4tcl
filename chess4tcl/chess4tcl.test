#!/usr/bin/env tclsh
package require tcltest
lappend auto_path [file join [file dirname [info script]] ..]

tcltest::test load-1.1 {check package loading} {
    package require chess4tcl
} {0.1.0}

tcltest::test new-1.1 {check constructor} {
    set chess [::chess4tcl::Chess4Tcl new]
    $chess fen
} {rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1}

tcltest::test new-1.2 {check move length} {
    llength [$chess moves]
} {20}

tcltest::test moves-1.1 {check a few moves} {
    $chess move e4
    $chess turn
    $chess move e5
    $chess move f4
    $chess fen
} {rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq f3 0 2}

tcltest::test ascii-1.1 {check ascii ouput} {
    $chess ascii
} {   +------------------------+
 8 | r  n  b  q  k  b  n  r |
 7 | p  p  p  p  .  p  p  p |
 6 | .  .  .  .  .  .  .  . |
 5 | .  .  .  .  p  .  .  . |
 4 | .  .  .  .  P  P  .  . |
 3 | .  .  .  .  .  .  .  . |
 2 | P  P  P  P  .  .  P  P |
 1 | R  N  B  Q  K  B  N  R |
   +------------------------+
     a  b  c  d  e  f  g  h
}

tcltest::test gameover-1.1 {check game over functionlity} {
    $chess game_over
} {false}

tcltest::test gameover-1.2 {check game over functionlity} {
    $chess load "4k3/4P3/4K3/8/8/8/8/8 b - - 0 78"
    $chess game_over
} {true}

tcltest::test gameover-1.3 {check game over functionlity} {
    $chess new
    $chess move e4
    $chess move e5
    $chess move Na3
    $chess move Qh4
    $chess move Ke2
    $chess move Qxe4
    $chess game_over
} {true}

tcltest::test get-1.1 {check get function} {
   $chess load "4k3/4P3/4K3/8/8/8/8/8 b - - 0 78"
   $chess get d8
} {{} {}}

tcltest::test get-1.2 {check get function} {
   $chess get e8
} {k b}

tcltest::test get-1.3 {check get function} {
   $chess get e7
} {p w}


tcltest::test history-1.1 {check history} {
    $chess new
    $chess move e4
    $chess move e5
    $chess move Na3
    $chess move Qh4
    $chess move Ke2
    $chess move Qxe4
    $chess history
} {e4 e5 Na3 Qh4 Ke2 Qxe4#}

tcltest::test history-1.1 {check history verbose} {
    $chess new
    $chess move e4
    $chess move e5
    $chess move Na3
    $chess move Qh4
    $chess move Ke2
    $chess move Qxe4
    $chess history true
} {{color w from e2 to e4 flags b piece p san e4} {color b from e7 to e5 flags b piece p san e5} {color w from b1 to a3 flags n piece n san Na3} {color b from d8 to h4 flags n piece q san Qh4} {color w from e1 to e2 flags n piece k san Ke2} {color b from h4 to e4 flags c piece q san Qxe4#}}

tcltest::test in-check-1.1 {check in-check false} {
    $chess new
    $chess move e4
    $chess move e5
    $chess in_check
} {false}

tcltest::test in-check-1.2 {check in-check false} {
    $chess new
    $chess move e4
    $chess move e5
    $chess move f4
    $chess move Qh4+
    $chess in_check
} {true}

tcltest::test pgn-1.1 {check pgn output} {
    $chess new
    $chess move e4
    $chess move e5
    $chess move f4
    $chess pgn
} {1. e4 e5 2. f4}

tcltest::test pgn-1.2 {check pgn output} {
    $chess header Black "James Black"
    $chess header White "Jimmy White"
    $chess pgn
} {[Black "James Black"]
[White "Jimmy White"]

1. e4 e5 2. f4}

tcltest::test pgn-1.3 {check loading pgn 1} {
set PGN {[Event "Casual Game"]
[Site "Berlin GER"]
[Date "1852"]
[White "Adolf Anderssen"]
[Black "Jean Dufresne"]
[Result "1-0"]
    
1.e4 e5 2.Nf3 Nc6 3.Bc4 Bc5 4.b4 Bxb4 5.c3 Ba5 6.d4 exd4 7.O-O
d3 8.Qb3 Qf6 9.e5 Qg6 10.Re1 Nge7 11.Ba3 b5 12.Qxb5 Rb8 13.Qa4
Bb6 14.Nbd2 Bb7 15.Ne4 Qf5 16.Bxd3 Qh5 17.Nf6+ gxf6 18.exf6
Rg8 19.Rad1 Qxf3 20.Rxe7+ Nxe7 21.Qxd7+ Kxd7 22.Bf5+ Ke8
23.Bd7+ Kf8 24.Bxe7# 1-0
}
$chess new
$chess load_pgn $PGN
$chess ascii
} {   +------------------------+
 8 | .  r  .  .  .  k  r  . |
 7 | p  b  p  B  B  p  .  p |
 6 | .  b  .  .  .  P  .  . |
 5 | .  .  .  .  .  .  .  . |
 4 | .  .  .  .  .  .  .  . |
 3 | .  .  P  .  .  q  .  . |
 2 | P  .  .  .  .  P  P  P |
 1 | .  .  .  R  .  .  K  . |
   +------------------------+
     a  b  c  d  e  f  g  h
}


tcltest::test pgn-1.4 {check loading pgn 2} {
$chess new
set PGN {[Event "F/S Return Match"]
[Site "Belgrade, Serbia JUG"]
[Date "1992.11.04"]
[Round "29"]
[White "Fischer, Robert J."]
[Black "Spassky, Boris V."]
[Result "1/2-1/2"]

1.e4 e5 2.Nf3 Nc6 3.Bb5 {This opening is called the Ruy Lopez.} 3...a6
4.Ba4 Nf6 5.O-O Be7 6.Re1 b5 7.Bb3 d6 8.c3 O-O 9.h3 Nb8 10.d4 Nbd7
11.c4 c6 12.cxb5 axb5 13.Nc3 Bb7 14.Bg5 b4 15.Nb1 h6 16.Bh4 c5 17.dxe5
Nxe4 18.Bxe7 Qxe7 19.exd6 Qf6 20.Nbd2 Nxd6 21.Nc4 Nxc4 22.Bxc4 Nb6
23.Ne5 Rae8 24.Bxf7+ Rxf7 25.Nxf7 Rxe1+ 26.Qxe1 Kxf7 27.Qe3 Qg5 28.Qxg5
hxg5 29.b3 Ke6 30.a3 Kd6 31.axb4 cxb4 32.Ra5 Nd5 33.f3 Bc8 34.Kf2 Bf5
35.Ra7 g6 36.Ra6+ Kc5 37.Ke1 Nf4 38.g3 Nxh3 39.Kd2 Kb5 40.Rd6 Kc5 41.Ra6
Nf2 42.g4 Bd3 43.Re6 1/2-1/2
}
$chess load_pgn $PGN
$chess ascii
} {   +------------------------+
 8 | .  .  .  .  .  .  .  . |
 7 | .  .  .  .  .  .  .  . |
 6 | .  .  .  .  R  .  p  . |
 5 | .  .  k  .  .  .  p  . |
 4 | .  p  .  .  .  .  P  . |
 3 | .  P  .  b  .  P  .  . |
 2 | .  .  .  K  .  n  .  . |
 1 | .  .  .  .  .  .  .  . |
   +------------------------+
     a  b  c  d  e  f  g  h
}

tcltest::test insufficient-1.1 {check insuficient material 1} {
    $chess load "k7/8/n7/8/8/8/8/7K b - - 0 1"
    $chess header White "Robert J. Fisher"
    $chess header Black "Mikhail Tal"
    $chess insufficient_material
} {true}

tcltest::test insufficient-1.2 {check insufficient material 2} {
    $chess load "k7/8/n7/8/8/Q7/8/7K b - - 0 1"
    $chess insufficient_material
} {false}

tcltest::test put-1.1 {put check} {
    $chess clear
    $chess put p b a5
    $chess put k w h1
    $chess put k b a8
    $chess fen
} {k7/8/8/p7/8/8/8/7K w - - 0 1}

tcltest::test put-1.2 {put check ignoring wring pieces} {
    $chess clear
    $chess put p b a5
    $chess put k w h1
    $chess put k b a8
    $chess put z w a1  ;# just ignored
    $chess fen
} {k7/8/8/p7/8/8/8/7K w - - 0 1}

tcltest::test put-1.3 {put check wrong piece} {
    $chess put x w a8
} {false}

tcltest::test put-1.3 {put check correct piece} {
    $chess put r w a8
} {true}

tcltest::test header-1.1 {check header names} {
    $chess new
    $chess move e4
    $chess header White "James White"
    $chess header Black "Jimmy Black"
    $chess header Event "Test Game chess4tcl"
    $chess header
} {White,Black,Event}

tcltest::test header-1.2 {check header pgn} {
    $chess new
    $chess move e4
    $chess header White "James White"
    $chess header Black "Jimmy Black"
    $chess header Event "Test Game chess4tcl"
    $chess pgn
} {[White "James White"]
[Black "Jimmy Black"]
[Event "Test Game chess4tcl"]

1. e4}

tcltest::test remove-1.1 {check removal of pieces} {
    $chess clear
    $chess put "White: Ka1,Ba2,Bb2,Nb1"
    $chess put "Black: Ka8,Ba7,Bb7,Rb8"
    $chess ascii
} {   +------------------------+
 8 | k  r  .  .  .  .  .  . |
 7 | b  b  .  .  .  .  .  . |
 6 | .  .  .  .  .  .  .  . |
 5 | .  .  .  .  .  .  .  . |
 4 | .  .  .  .  .  .  .  . |
 3 | .  .  .  .  .  .  .  . |
 2 | B  B  .  .  .  .  .  . |
 1 | K  N  .  .  .  .  .  . |
   +------------------------+
     a  b  c  d  e  f  g  h
}

tcltest::test remove-1.2 {check removal of pieces} {
    $chess remove b7
} {true}

tcltest::test remove-1.2 {check removal of non-existing pieces} {
    $chess remove c7
} {false}

tcltest::test remove-1.3 {check removal result} {
    $chess ascii
} {   +------------------------+
 8 | k  r  .  .  .  .  .  . |
 7 | b  .  .  .  .  .  .  . |
 6 | .  .  .  .  .  .  .  . |
 5 | .  .  .  .  .  .  .  . |
 4 | .  .  .  .  .  .  .  . |
 3 | .  .  .  .  .  .  .  . |
 2 | B  B  .  .  .  .  .  . |
 1 | K  N  .  .  .  .  .  . |
   +------------------------+
     a  b  c  d  e  f  g  h
}

tcltest::test turn-1.1 {check turn} {
    $chess load "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1"
    $chess turn
} {b}

tcltest::test in-check-1.1 {check false} {
    $chess new
    $chess move e4
    $chess move e5
    $chess move Na3 
    $chess move Qh4
    $chess in_check
} {false}

tcltest::test in-check-1.2 {check true} {
    $chess new
    $chess move e4
    $chess move e5
    $chess move f4 
    $chess move Qh4
    $chess in_check
} {true}

tcltest::test in-check-1.3 {check mate} {
    $chess new
    $chess move e4
    $chess move e5
    $chess move Na3 
    $chess move Qh4
    $chess move Ke2
    $chess move Qxe4
    $chess in_check
} {true}

tcltest::test in-checkmate-1.1 {check if mated} {
    $chess new
    $chess move e4
    $chess move e5
    $chess move Na3 
    $chess move Qh4
    $chess move Ke2
    $chess move Qxe4
    $chess in_checkmate
} {true}

tcltest::test font-1.1 {check Chess Berlin} {
  $chess board Berlin
} {1222222223
4tJn+lNjT5
4OoOo+oOo5
4 + + + +5
4+ + O + 5
4 + +w+ +5
4H + + + 5
4pPpPkPpP5
4R Bq+bHr5
7888888889}

tcltest::test font-1.2 {check Chess Merida} {
  $chess board Merida
} {1222222223
4tMv+lVmT5
4OoOo+oOo5
4 + + + +5
4+ + O + 5
4 + +w+ +5
4N + + + 5
4pPpPkPpP5
4R Bq+bNr5
7888888889}

if {[info exists ::env(DISPLAY)]} {
    tcltest::test font-tk-1.1 {check chess berlin} {
        package require Tk
        font create chessberlin -family "Chess Berlin" -size 20 
        option add *font chessberlin
        pack [text .t]
        .t insert end [$chess board Berlin]
        update idletasks
        after 2000
        set x true
    } {true}
}
    
::tcltest::cleanupTests 0
return
